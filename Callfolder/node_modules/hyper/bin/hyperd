#!/bin/bash
#
# hyperd    Start/Stop the webapp
#
# chkconfig: 345 64 36
# description: Launcher daemon
# processname: appd
# pidfile: /www/hyperd.pid

set -o pipefail
#set -x

#-----------------------------

  NAME=hyperd
  APP_JS="hyper.js"
  TIMESTAMP=$(date +%s)

  export NODE_DAEMON=hyperd-forever

  awk=awk
  sed=sed

  FOREVER_ID=''
  REVISION=''

#-----------------------------

  #if we dont have init.d assume this is dev
  #dev config
  BASE_DIR=~/src/hyper/www
  VAR_DIR=$BASE_DIR/tmp
  LOG_DIR=$BASE_DIR/tmp
  APP_DIR="."
  FOREVER=/usr/local/bin/forever
  NODEJS=$(which node)

  export NODE_ENV=development
  export PID_FILE=$VAR_DIR/$NAME.pid
  export LOG_FILE=$LOG_DIR/$NAME.log

  CONFIG_INSTALL_FILE=$BASE_DIR/meta/config/index.js

  BUILDINFO_INSTALL_FILE=$BASE_DIR/build-info-install.js
#-----------------------------

  CONFIG_FILE=$APP_DIR/lib/common/lib/config.js
  LOCAL_CONFIG_FILE=$APP_DIR/config-local.js

  BUILDINFO_FILE=$APP_DIR/lib/common/lib/build-info.js
  BUILDINFO_INSTALL_FILE=$APP_DIR/build-info-install.js

  export REVISION_FILE=$APP_DIR/bin/build.dat


#-----------------------------

  command_exists () {
      type "$1" &> /dev/null ;
  }

  #check for usleep command
  if command_exists usleep; then
    SLEEP=usleep
  else
    SLEEP=sleep
  fi


  #check for forever command
  if ! command_exists forever; then
    echo "Error: Forever module missing, cannot start Daemon"
    exit 1
  fi


#-----------------------------
#
  function countRunning() {
    $FOREVER list 2>&1 | grep -c $APP_JS
    #forever list 2>&1 | grep -c init.js
  }

#-----------------------------

  start() {
    echo 'Starting...'
   if [ "$(countRunning)" == 0 ]; then
      # Create the log and pid files, making sure that the target use has access to them
      touch $LOG_FILE
      #chown $USER $LOG_FILE

      touch $PID_FILE
      #chown $USER $PID_FILE

      #$START_DAEMON
      startForever

   else
      echo "$NAME already running!"
   fi
   if [ $? -eq 0 ]; then
       doSuccess ""
   fi
  }

  start_dev() {
    $FOREVER start --minUptime 5000 --spinSleepTime 5000 --pidFile $PID_FILE $APP_DIR $APP_JS
  }

  startForever() {
    echo "Starting new <$NAME> node instance... ($PID_FILE)"
    $FOREVER start --minUptime 5000 --spinSleepTime 5000 --pidFile $PID_FILE -l $LOG_FILE -a -d --sourceDir $APP_DIR $APP_JS
    #forever start --minUptime 5000 --spinSleepTime 5000 --pidFile appd.pid -l appd.log -a -d --sourceDir . init.js
  }

  stop() {
    echo "Shutting down $NAME node instance..."
    if [ "$(countRunning)" == 0 ]; then
      echo "Instance Not Running!"
    else
      local FOREVER_ID=$(getForeverID)
      echo "Stopping Instance with Forever ID [$FOREVER_ID] ..."
      $FOREVER stop $FOREVER_ID >/dev/null
    fi
  }


  # doesn't work
  waitforexit() {
    echo $"Waiting for exit..."
    local PID=
    PID=$(getPID)

    if [[ $? -ne 0 || "$PID" == "" ]]; then
      doSuccess "$NAME exited"
      return 0
    fi

    let i=0
    while [ -e /proc/$pid ]; do
        let i=$i+1
        if [ $i -gt 300 ]; then
            kill -9 $pid
            doWarning "$NAME killed!"
            return 0
        fi
        command_exists $SLEEP && $SLEEP 100000
    done
    doSuccess "$NAME exited!"
    return 0
  }

  waitforPID() {
    echo $"Waiting for startup..."
    let i=0
    while [ "$(countRunning)" == 0 ]; do
        let i=$i+1
        if [ $i -gt 300 ]; then
            doWarning "$NAME not running!"
            return 0
        fi
        command_exists $SLEEP && $SLEEP 100000
    done
    doSuccess "$NAME started!"
    return 0
  }

  status() {
    echo
    $FOREVER list
    if [ "$(countRunning)" == 0 ]; then
        echo "$NAME not running..."
        false;
    else
        echo "$NAME is already running..."
        true;
    fi
  }

  restart() {
    if [ "$(countRunning)" == 0 ]; then
      echo "not running, starting"
      startForever
    else
      echo "Restarting $NAME node instance..."
      $FOREVER restart $APP_JS
    fi
  }

  condrestart() {
    if [ "$(countRunning)" == 0 ]; then
      true
    else
      echo "Restarting $NAME node instance..."
      $FOREVER restart $APP_JS
    fi
  }

  running() {
   if [ "$(countRunning)" == 0 ]; then
     echo "not running"
   else
     echo "running"
   fi
  }

#-----------------------------

  # works on dev, seems to have issue on production
  getForeverID() {

    local __resultvar=$1
    local result="-999"
    local PID=$(getPID)

    #this can be problematic if more than one instance is running for some reason will produce 0 1 2, using -m option to limit result set
    local list=$($FOREVER list | grep -m 1 "$PID")
    local id=""

    id=$( echo -e $list | awk '{print $2}' | tr -d [])

    #forever outputs 'No' when there are no instances running
    if [ -z $PID ]; then
      ERR_MESSAGE='No PID defined'
    elif [ "$id" == "No" ]; then
      ERR_MESSAGE="Error: Cannot determine foreverID for [${APP_JS}] PID [${PID}] id[$id] res[$?]"
    else
      result=$id
    fi

    if [[ "$__resultvar" ]]; then
      eval $__resultvar="'$result'"
    else
      echo "$result"
    fi

  }

  # works on dev, seems to have issue on production
  getPID() {
      cat $PID_FILE 2>/dev/null
  }

#-----------------------------

  function sync() {
    checkRevision
    updateConfig
    buildinfo
  }

  function checkRevision() {
    if command_exists git; then
      local REV_DIFF='';
      local LOCALREV=$(git rev-list HEAD | wc -l | tr -d ' ');

      getRevision REVISION

      if [ $LOCALREV -ne $REVISION ]; then

        REV_DIFF=`expr $LOCALREV - $REVISION`

        echo 'Revision out of sync', $LOCALREV, $REVISION, "$REV_DIFF revision ahead"
        updateRevision

      fi
      true;

    else
      echo 'Error: Cant check current revision, No git'
      false;
    fi
  }

  function getRevision() {

    local __resultvar=$1
    local result='0'

    if [ -e $REVISION_FILE ]; then
      result=$( cat < `echo $REVISION_FILE` )
    fi

    if [[ "$__resultvar" ]]; then
      eval $__resultvar="'$result'"
    else
      echo "$result"
    fi

  }

  function updateRevision() {
    if command_exists git; then
      echo 'Local source changes detected, updating...'
      git rev-list HEAD | wc -l | tr -d ' ' > $REVISION_FILE
    fi
  }

  function updateConfig() {
    checkConfig CONFIG_CHECK
    if [ $CONFIG_CHECK = true ]; then
      echo "Config/Revision up to date! (revision $REVISION)"
    else
      echo 'Changes to config detected, updating...'
      forceupdateConfig
    fi
  }

  function checkConfig() {

    local __resultvar=$1
    local result='0'

    if command_exists md5; then
      MD5="md5 -r"
      WITHMD5=1
    elif command_exists md5sum; then
      MD5=md5sum
      WITHMD5=1
    fi

    if [ $WITHMD5 ]; then

      localconfig

      if [ $LOCAL_CONFIG = 'true' ]; then
        ERR_MESSAGE="USING LOCAL $CONFIG_SRC"

      else
        ERR_MESSAGE="NOT USING LOCAL $CONFIG_SRC"
      fi

      sum1=`$MD5 $CONFIG_SRC | cut -d ' ' -f 1`
      sum2=`$MD5 $CONFIG_FILE | cut -d ' ' -f 1`

      #TODO check if global config has changed

      if [ "$sum1" = "$sum2" ]; then
        ERR_MESSAGE='Config files match'
        result=true
      else
        echo -e $sum1
        echo -e $sum2
        ERR_MESSAGE='Config files DO NOT match'
        result=false
      fi

    else
       echo 'NO MD5'
       ERR_MESSAGE='Error: Cant verify config file, missing md5 or md5sum'
    fi

    if [[ "$__resultvar" ]]; then
      eval $__resultvar="'$result'"
    else
      echo "$result"
    fi

  }

  function localconfig() {
    if [ -e $LOCAL_CONFIG_FILE ]; then
      CONFIG_SRC=$LOCAL_CONFIG_FILE
      LOCAL_CONFIG=true;
    else
      CONFIG_SRC=$CONFIG_INSTALL_FILE
      LOCAL_CONFIG=false;
    fi
  }

  function forceupdateConfig() {
    localconfig
    if [ -e $CONFIG_SRC ]; then
      cp -f $CONFIG_SRC $CONFIG_FILE
      echo 'Installing config file..'
    else
      echo 'No Config install file..'
    fi

  }

  function buildinfo() {

    BUILDDATE=$(date +%m-%d-%y)
    PRETTYDATE=$(date);

    echo -e "// GENERATED BUILD INFO FILE - Last Built ($PRETTYDATE) //" > $BUILDINFO_INSTALL_FILE
    echo -e "module.exports.BUILD_REVISION = '$REVISION';" >> $BUILDINFO_INSTALL_FILE
    echo -e "module.exports.BUILD_TIME = '$TIMESTAMP';" >> $BUILDINFO_INSTALL_FILE
    echo -e "module.exports.BUILD_DATE = '$BUILDDATE';" >> $BUILDINFO_INSTALL_FILE
      echo -e "module.exports.BUILD_ENV = '$NODE_ENV';" >> $BUILDINFO_INSTALL_FILE
    mv -f $BUILDINFO_INSTALL_FILE $BUILDINFO_FILE
    echo 'Installing build-info file..'
    cat $BUILDINFO_FILE;
    true
  }


#-----------------------------

  doFailure() {
    echo -n "$1"
    command_exists failure && failure
    echo
  }

  doSuccess() {
    #echo -n "$1"
    command_exists success && success
    echo
  }

  doWarning() {
    echo -n "$1"
    command_exists warning && warning
    echo
  }

  checkMessage(){
    if [ -n "$ERR_MESSAGE" ]; then
      echo $ERR_MESSAGE
      false
    else
      true
    fi
  }

#-------------------------
# main
#forever maintains its own process IDs
#FOREVER_ID=$(getForeverID)
#getForeverID FOREVER_ID

  getRevision REVISION
  export REVISION_ID=$REVISION


#-------------------------

  case "$1" in
      pid)
        echo $(getPID)
        ;;
      update)
        sync
        #checkMessage
        ;;
      fid)
        getForeverID FOREVER_ID
        echo $FOREVER_ID
        checkMessage
        ;;
      start)
        start
        ;;
      rev)
        checkRevision
        checkMessage
        ;;
      config)
        checkConfig CONFIG_CHECK
        checkMessage
        ;;
      local)
        sync
        make runmon
        true
        ;;
      stop)
        getForeverID FOREVER_ID
        stop
        waitforexit
        ;;
      waitforexit)
        waitforexit
        ;;
      restart)
        restart
        ;;
      condrestart)
        condrestart
        ;;
      count)
        echo $(countRunning)
        ;;
      status)
        status
        ;;
      running)
        echo $(running)
        ;;
      *)
    echo $"Usage: $NAME { start | stop | stopall | status | id | fid | rev | restart | running }"
    exit 1
  esac
  exit $?

