#!/bin/bash
#
# hyperutil

		#-----------------------------------------------------------------



		#-----------------------------------------------------------------

		clear_eol=$(tput el)
		purple=$(tput setaf 5)
		red=$(tput setaf 1)
		green=$(tput setaf 2)
		yellow=$(tput setaf 11)
		orange=$(tput setaf 3)
		blue=$(tput setaf 12)
		cyan=$(tput setaf 14)
		grey=$(tput setaf 247)
		white=$(tput setaf 15)
		whitedim=$(tput setaf 243)
		PASS='\xE2\x9C\x93';
		FAIL='\xE2\x9C\x97';

		#-----------------------------------------------------------------



		#-----------------------------------------------------------------
		#
		set -o pipefail
		shopt -s expand_aliases

		#-----------------------------------------------------------------



		#-----------------------------------------------------------------

		function _key(){
		    IFS= read -r -s -n1 -d '' "${@:-_KEY}"
		}

		function command_exists () {
				type "$1" &> /dev/null ;
		}

		function mkp() {
			mkdir -p "$*" && cd "$*" && pwd
		}

		function findin() {
			find . -exec grep -q "$1" '{}' \; -print
		}

		function realpath() {
			echo $(cd $(dirname $1); pwd)/$(basename $1);
		}

		function inpath (){
			case ":$PATH:" in
				*":$1:"*) return 1;;
				*) return 0;;
			esac
		}

		function add_path(){
			for d; do
				d=$(cd -- "$d" && { pwd -P || pwd; }) 2>/dev/null  # canonicalize symbolic links
				if [ -z "$d" ]; then continue; fi  # skip nonexistent directory
				case ":$PATH:" in
					*":$d:"*) :;;
					*) PATH=$PATH:$d;;
				esac
			done
		}

		function add_bin() {
			local BIN_DIR="$PWD/${1:-bin}"
			if [ -d $BIN_DIR ]; then
				add_path $BIN_DIR
			fi
			echo "$green Added new bin $BIN_DIR $clear_eol "
		}

		function get_env(){
			local PATTERN=$1
			if [ -n $PATTERN ]; then
				IFS="="
				set | grep "^HYPER[=_]+*" | while read -r line value ; do
					echo -e "$line"
				done
			fi
		}

		function read_config(){
			ifpipe
			regex='\$\{([a-zA-Z_][a-zA-Z_0-9]*)\}'
			while read line; do
					while [[ "$line" =~ $regex ]]; do
							param="${BASH_REMATCH[1]}"
							line=${line//${BASH_REMATCH[0]}/${!param}}
					done
					echo $line
			done

		}

			#for a in `cat hosts.txt` ; do echo ${a//abc/XYZ} ; done > hosts.txt.t
			#sed -i -e 's/'"$var1"'/'"$var2"'/g' /tmp/file.txt
			#while read a ; do echo ${a//abc/XYZ}; done < /tmp/file.txt > /tmp/file.txt.t ; mv /tmp/file.txt{.t,}

		function whichos(){
			case "$OSTYPE" in
				solaris*)      echo "solaris" ;;
				darwin*)  		 echo "osx" ;;
				linux*)   		 echo "linux" ;;
				bsd*)     		 echo "bsd" ;;
				msys*|cygwin*) echo "win" ;;
				*)        		 echo "unknown: $OSTYPE" ;;
			esac
		}

		function perl_match(){
			if [ ! -z "$1" ] && [ ! -z "$2" ]; then
				local pattern="${1}"
				local file="${2}"
				local os=$(whichos)
				if [ $os == "osx" ] || [ $os == "bsd" ]; then
					found=$(perl -nle "print $& if m{$pattern}" "$file") #works so far
				else
					found=$(grep -o -P "$pattern" "$file")
				fi

			fi
			echo $found
		}


		function re_str(){
			if [ ! -z "$1" ] && [ ! -z "$2" ] && [ ! -z "$3" ]; then
				local file="${1}"
				local key="${2}"
				local val="${3}"
				local match="$key"
				local replace="$key=\"$val\""

				found=$(perl_match "$match=.*" "$file") #in file
				found_val=$(perl_match "$match=\"$val\"" "$file") #same val

				if [ ! -z $found ]; then
					if [ -z $found_val ]; then
						sed -i.bak "s|^${match}\=.*$|${replace}|" ${file}
						rm "${file}.bak"
					fi
				else
					#echo "adding new key $KEY ($found,${VAL})" | color g
					printf "%s\\n" "${key}=\"${val}\"" >> $file
				fi
			else
				echo 'KEY and VAL required, missing'
			fi
		}


		#-----------------------------------------------------------------


		function safename(){
			local name=$1
			local ext=${2-""}
			local cache=${3-""}
			local count=0
			#extension is optional but if provied adds dot
			if [ -n "${cache}" ]; then ext="-${cache}"; fi
			if [ -n "${ext}"   ]; then ext=".${ext}"; fi
			local temp="${name}${cache}"
			local base="${temp}"
			#increment file
			while [ -f "${temp}${ext}" ] || [ -f "${base}-${count}${ext}" ]; do
				count=$[count + 1]
				temp="${base}-${count}"
			done
			temp="${temp}${ext}"
			printf "${temp}"
		}

		function util_tarup() {
			local name=$1; shift
			local list=("${@}")
			local tarfile="$(safename ${name} tar)"
			local tarcmd="tar -Hcf ${tarfile} ${list[@]}" #store symlink deref
			${tarcmd} 2>&1 | grep -v "Removing leading"
			#retun value
			TAR_FILE=${tarfile}
		}

		function bash_profile(){
			source_file="$(realpath $1)"
			match="source ${source_file}"
			file=${2:-$HOME/.profile}
			[ ! -f $file ] && touch $file
			found=$(perl_match "$match" "$file")
			[ -z "$found" ] && printf "%s\\n" "${match}" >> $file
			#echo ${found:-not found} $file $match

		}
		#-----------------------------------------------------------------




		#-----------------------------------------------------------------
		function git_revision () {
			git rev-list HEAD | wc -l | tr -d ' ' > git.log
			#$(git rev-list HEAD | wc -l | tr -d ' ')
		}


		function timestamp() {
			echo -e $(date +%s)
		}

		function strip_comments(){
			sed '/^#/ d' $1
		}

		function gunset(){
			local PATTERN=$1
			if [ -n $PATTERN ]; then
				IFS="="
				env | grep ${PATTERN} | while read -r line value ; do
					echo -e "$line"
					unset $line
				done
			fi
		}

		function asksure() {
			echo -n "${1:-Are you sure (y/n)?}${x}"
			while read -r -n 1 -s answer; do
				if [[ $answer = [YyNn] ]]; then
					[[ $answer = [Yy] ]] && retval=0
					[[ $answer = [Nn] ]] && retval=1
					break
				fi
			done

			echo # just a final linefeed, optics...

			return $retval
		}

		function exitfn() {
			trap SIGINT              # Restore signal handling for SIGINT
			echo; echo "Aarghh!!$1"  # Growl at user,
			stty echo
			stty ctlecho
			exit                     # then exit script.
		}
		#-----------------------------------------------------------------




		#-----------------------------------------------------------------
		#----------------------
		#

		if [[ "$0" == "$BASH_SOURCE" ]]; then
			#echo -e "$cyan(Î») Hyper-util cannot be run directly. Try 'hyper' $clear_eol";
			$@ #this is a bit hacky and may not work all the time.
		fi

		#hyper_util_loaded=1

